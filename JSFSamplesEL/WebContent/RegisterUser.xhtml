<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:p="http://xmlns.jsp.org/jsf/passthrough"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:jsf="http://xmlns.jcp.org/jsf">

	<ui:composition template="/template.xhtml">
	
	<ui:define name="header">Registrierungs Asistent - Step 1</ui:define>
	
	<ui:define name="content">
	
		<!-- Formular für die Arbeit mit AJAX markieren (verwenden der tatsächliche Feld ID´s)  
	um expliziet mitgeben zu können welche Elemente aktulisiert werden sollen -->
	<h:form prependId="false">
			
			
		<!-- Passthrough Element -->
		<div jsf:rendered="#{ !newUserBean.showMessage }"> 
			<h3>Daten eingeben um: #{newUserController.time}</h3>
			
			<!-- Nur nicht behandelte Fehler anzeigen 
			errorStyle eher nicht produktiv verwenden sonden man sollte hier eine eigene css Klassse per errorClass referenzieren -->
			<h:messages globalOnly="true" errorStyle="color:red" />
						
				<div>
					<!-- Validieren per Beans Validation und Message Ausgabe-->
					<h:outputLabel value="Benutzernamen angeben:  " for="loginName"/>
					<h:inputText id="loginName" value="#{newUserBean.loginName}" 
							p:placeholder="Anmeldename" />
					<h:message for="loginName" errorStyle="color:red" showDetail="true"/>
							
				</div>
				<br></br>
				<div>
					<h:outputLabel value="Kennwort eingeben:  " for="password"/>
					<h:inputSecret id="password" value="#{newUserBean.password}" 
						required="true"
						requiredMessage="Bitte geben Sie ein Kennwort an!">
						<!-- Validieren per deklarativer Angabe eines Validators und Message Ausgabe-->
						<f:validateLength maximum="10" minimum="3"></f:validateLength>
					</h:inputSecret>
					<h:message for="password" errorStyle="color:red" showDetail="true"/>
					
				</div>
				<br></br>
				<div>
					<h:outputLabel value="Geschlecht auswählen:  " for="gender" />
					<h:selectOneMenu id="gender" value="#{newUserBean.gender}">
						<f:selectItems value="#{newUserController.genders}"></f:selectItems>
						<f:converter converterId="GenderConverter"></f:converter>
					</h:selectOneMenu>
		
				</div>
				<br /> &#160; <br />
				<div>						
					<h:commandButton id="submitButton" actionListener="#{newUserController.handleButtonClicked}" value="Daten übernehmen">
						<!-- Versenden des gesamten Formular und dieses auch nach Rückgabe neu rendern. (Uhrzeit im Footer ändert sich nicht) -->
						<f:ajax execute="@form" render="@form"></f:ajax>
					</h:commandButton>
				</div>
				
						
		</div>
		
		<!-- Passthrough Element -->
		<div jsf:id="thankYou" jsf:rendered="#{ newUserBean.showMessage }">
			<h3>Danke! Ihre Daten wurden gespeichert um #{newUserController.time}</h3>
				<div>

					<h:outputLabel for="name" value="Benutzername:  " />
					<h:outputText id="name" value="#{newUserBean.loginName}" />
					<br /> &#160; <br />
	
					<h:outputLabel for="genderOut" value="Geschlecht:  " />
					<h:outputText id="genderOut" value="#{newUserBean.gender}" converter="LocalizationGenderConverter">
					<!--  <f:converter converterId="LocalizationGenderConverter" /> -->
					</h:outputText>
					<br /> &#160; <br />
					
					<h:outputLabel for="pwd" value="Passwort:  " />
					<h:outputText id="pwd" value="#{newUserBean.password}" />
					<br /> &#160; <br />
					
					<h:form>
						<h:commandButton action="#{newUserBean.reset}" value="Noch einen Benutzer anlegen">
							<!-- Versenden des gesamten Formular und dieses auch nach Rückgabe neu rendern. (Uhrzeit im Footer ändert sich nicht) -->
							<f:ajax execute="@form" render="@form"></f:ajax>
						</h:commandButton>
						<br /> &#160; <br />
					</h:form>
					
					<h:link value="Öffne User Liste" outcome="ZeigeUser.xhtml"/>
				
				</div>
		</div>
	
	</h:form>
	
	</ui:define>
	
	</ui:composition>
	
	
</html>